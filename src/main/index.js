import { app, shell, BrowserWindow, ipcMain, session, dialog } from 'electron'
import { join } from 'path'
import { electronApp, optimizer, is } from '@electron-toolkit/utils'
import icon from '../../resources/icon.png?asset'
import { existsSync, mkdirSync, writeFileSync } from 'fs'
import { spawn } from 'child_process'
import fs from 'fs/promises'
import { autoUpdater } from 'electron-updater';
autoUpdater.autoDownload = false;
autoUpdater.autoInstallOnAppQuit = false;

// Check for updates
function checkForUpdates() {
  autoUpdater.checkForUpdates();
}

// Handle update events
autoUpdater.on('update-available', (info) => {
  mainWindow.webContents.send('update-available', info);
});

autoUpdater.on('update-downloaded', (info) => {
  mainWindow.webContents.send('update-downloaded', info);
});

autoUpdater.on('error', (err) => {
  mainWindow.webContents.send('update-error', err);
});
setInterval(checkForUpdates, 60 * 60 * 1000); // Check every hour
checkForUpdates();
const ffmpegPath = app.isPackaged
  ? join(process.resourcesPath, 'ffmpeg.exe')
  : join(__dirname, '../../public/ffmpeg.exe')
const ffprobePath = app.isPackaged
  ? join(process.resourcesPath, 'ffprobe.exe')
  : join(__dirname, '../../public/ffprobe.exe')
let mainWindow
const cookiesPath = app.isPackaged
  ? join(process.resourcesPath, 'cookies.txt')
  : join(__dirname, '../../public/cookies.txt')

const ytdlpPath = app.isPackaged
  ? join(process.resourcesPath, 'yt-dlp.exe')
  : join(__dirname, '../../public/yt-dlp.exe')
// Set icon path based on OS
let iconPath = ''
switch (process.platform) {
  case 'win32':
    iconPath = join(__dirname, '../../public/icon.ico')
    break
  case 'linux':
    iconPath = icon
    break
  default:
    iconPath = join(process.resourcesPath, 'icon.png')
}

// Prevent multiple instances
const gotTheLock = app.requestSingleInstanceLock()
if (!gotTheLock) {
  app.quit()
} else {
  app.on('second-instance', () => {
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore()
      mainWindow.focus()
    }
  })
}

function createWindow() {
  if (mainWindow) return // Prevent duplicate windows

  mainWindow = new BrowserWindow({
    width: 1200,
    height: 670,
    minWidth: 1200,
    minHeight: 670,
    maxWidth: 1200,
    maxHeight: 670,
    autoHideMenuBar: true,
    icon: iconPath,

    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false,
      webviewTag: true, // Disabled by default (safer)
      nodeIntegration: false,
      contextIsolation: true
    }
  })

  mainWindow.once('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.on('closed', () => {
    mainWindow = null // Cleanup memory
  })

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }
}

app.whenReady().then(() => {
  electronApp.setAppUserModelId('com.electron')

  app.on('browser-window-created', (_, window) => {
    optimizer.watchWindowShortcuts(window)
  })

  ipcMain.on('open-webview', (event, url) => {
    console.log('Received YouTube Video URL:', url)
    if (mainWindow) {
      mainWindow.webContents.send('webview-url-update', url)
    }
  })

  createWindow()

  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
async function updateCookiesFile() {
  try {
    const cookies = await session.defaultSession.cookies.get({ domain: '.youtube.com' })
    if (!cookies.length) {
      console.error('No YouTube cookies found.')
      return
    }

    const lines = [
      '# Netscape HTTP Cookie File',
      '# This file is generated by Electron for use by yt-dlp.',
      '# This file was last updated on ' + new Date().toString(),
      ''
    ]

    cookies.forEach((cookie) => {
      let domain = cookie.domain
      if (!domain.startsWith('.')) {
        domain = '.' + domain
      }
      const includeSubdomains = 'TRUE'
      const isSecure = cookie.secure ? 'TRUE' : 'FALSE'
      const expiry = cookie.expirationDate ? Math.floor(cookie.expirationDate) : 0

      const line = [
        domain,
        includeSubdomains,
        cookie.path,
        isSecure,
        expiry,
        cookie.name,
        cookie.value
      ].join('\t')

      lines.push(line)
    })

    const fileContent = lines.join('\n')
    writeFileSync(cookiesPath, fileContent, 'utf8')
    console.log('Cookies updated successfully at:', cookiesPath)
  } catch (error) {
    console.error('Error updating cookies:', error)
  }
}
ipcMain.handle('getYoutubeCookies', async () => {
  await updateCookiesFile()
  return cookiesPath
})
// function formatDuration(seconds) {
//   const minutes = Math.floor(seconds / 60);
//   const remainingSeconds = seconds % 60;
//   return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
// }
ipcMain.handle('fetch-video-info', async (event, url) => {
  return new Promise((resolve, reject) => {
    const args = ['-J', url]
    const proc = spawn(ytdlpPath, args)

    let stdout = ''
    let stderr = ''

    proc.stdout.on('data', (data) => {
      stdout += data.toString()
    })

    proc.stderr.on('data', (data) => {
      stderr += data.toString()
    })

    proc.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`yt-dlp exited with code ${code}. Error:\n${stderr}`))
        return
      }

      try {
        const json = JSON.parse(stdout)

        const title = json.title || ''
        let thumbnail = ''
        if (Array.isArray(json.thumbnails) && json.thumbnails.length > 0) {
          thumbnail = json.thumbnails[json.thumbnails.length - 1].url
        }

        const timeDuration = json.duration || 0

        // Duration in seconds
        const duration = formatDuration(timeDuration) // Format duration

        const filename = title && json.ext ? `${title}.${json.ext}` : title

        resolve({ title, thumbnail, filename, duration, duration })
      } catch (err) {
        reject(new Error(`Failed to parse JSON from yt-dlp: ${err.message}`))
      }
    })
  })
})

// Helper function to format duration
function formatDuration(seconds) {
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
}

// üõ† Ensure ffmpeg & ffprobe exist
if (!existsSync(ffmpegPath) || !existsSync(ffprobePath)) {
  console.error('FFmpeg or FFprobe not found! Please install FFmpeg.')
}

let downloadProcess = null; // Track the current download process
const activeDownloads = {};
const startDownload = async (event, options) => {
  return new Promise((resolve, reject) => {
    try {
      if (downloadProcess) {
        event.sender.send('download-progress', { status: 'A download is already in progress!' });
        return reject(new Error('A download is already in progress.'));
      }

      const { id: downloadId, url, isAudioOnly, selectedFormat, selectedQuality, saveTo } = options;
      if (!url || typeof url !== 'string') {
        return reject(new Error('Invalid URL.'));
      }

      if (activeDownloads[downloadId]) {
        console.log(`Download already in progress for ${url}`);
        return reject(new Error('Download already in progress.'));
      }

      console.log('Download options:', options);

      // üîç **Check if URL is a Playlist**
      const isPlaylist = url.includes("playlist") || url.includes("&list=") || url.includes("?list=");

      // Format and quality processing
      const finalQualityVideo = selectedQuality.replace(/[pP]$/, '');
      const format = selectedFormat ? selectedFormat.toLowerCase() : 'mp4';
      const formatSpecifier = isAudioOnly
        ? `--extract-audio --audio-format mp3 --audio-quality best`
        : `-f bestvideo[height<=${finalQualityVideo}][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=${finalQualityVideo}]+bestaudio/best[ext=mp4]/best --merge-output-format ${format}`;
      
      console.log('Format Specifier:', formatSpecifier);

      // Determine save location
      let downloadDir = saveTo === 'Desktop'
        ? join(app.getPath('desktop'), 'pnutdownloader')
        : join(app.getPath('downloads'), 'pnutdownloader');

      if (!existsSync(downloadDir)) {
        mkdirSync(downloadDir, { recursive: true });
      }

      const downloadPath = join(downloadDir, '%(title)s.%(ext)s');

      // Construct arguments for yt-dlp
      const args = [
        '--continue',
        '--ffmpeg-location', ffmpegPath,
        '-o', downloadPath,
        '--cookies', cookiesPath,
        '--newline',
        '--ignore-errors',
        '--progress',
        ...formatSpecifier.split(' '),
        url
      ];

      // ‚úÖ **Auto-Detect and Apply Playlist Option**
      if (isPlaylist) {
        args.push('--yes-playlist');  // Enables full playlist downloading
      } else {
        args.push('--no-playlist');   // Ensures only a single video download
      }

      console.log('Downloading with args:', args);

      // Start download process
      downloadProcess = spawn(ytdlpPath, args, { windowsHide: true });
      activeDownloads[downloadId] = true;

      downloadProcess.stdout.on('data', (data) => {
        const line = data.toString().trim();
        console.log('output-ytlp', line);
        event.sender.send('download-progress', { message: line });
      });

      downloadProcess.stderr.on('data', (data) => {
        const errorMessage = data.toString().trim();
        console.error('yt-dlp Error:', errorMessage);
        event.sender.send('download-progress', { error: errorMessage });
      });

      downloadProcess.on('close', (code) => {
        delete activeDownloads[downloadId];  // Remove from active downloads
        downloadProcess = null;

        if (code === 0) {
          event.sender.send('download-progress', { status: 'Download complete!', file: downloadPath });
          resolve();
        } else {
          event.sender.send('download-progress', { error: `Download failed with code ${code}` });
          reject(new Error(`Download failed with code ${code}`));
        }
      });

      downloadProcess.on('error', (err) => {
        console.error('Download process error:', err);
        event.sender.send('download-progress', { error: err.message });
        delete activeDownloads[downloadId];
        downloadProcess = null;
        reject(err);
      });

    } catch (err) {
      console.error('Download error:', err);
      event.sender.send('download-progress', { error: err.message });
      reject(err);
    }
  });
};


ipcMain.handle('downloadVideo', async (event, options) => {
  console.log('Starting download...');
  try {
    await startDownload(event, options); // Wait for the download to complete
    console.log('Download completed successfully.');
  } catch (err) {
    console.error('Download failed:', err);
    throw err; // Propagate the error to the renderer process
  }
});
ipcMain.handle('show-message-box', async (_, options) => {
  return dialog.showMessageBox(mainWindow, options)
})
ipcMain.handle('resumeDownload', async (event, options) => {
  if (!downloadProcess) {
    console.log('Resuming download...')
    await startDownload(event, options)
    return true
  }
  return false
})
const treeKill = require('tree-kill')
ipcMain.handle('pauseDownload', () => {
  console.log('Attempting to pause download...')
  if (downloadProcess) {
    console.log('Killing download process with PID:', downloadProcess.pid)
    treeKill(downloadProcess.pid, 'SIGKILL', (err) => {
      if (err) {
        console.error('Failed to kill process tree:', err)
      } else {
        console.log('Process tree killed successfully.')
      }
    })
    downloadProcess = null
    return true
  }
  console.log('No active download to pause.')
  return false
})
function saveDownloadState(state) {
  const filePath = join(app.getPath('userData'), 'downloadState.json')
  fs.writeFileSync(filePath, JSON.stringify(state))
}

ipcMain.handle('load-download-state', () => {
  const filePath = join(app.getPath('userData'), 'downloadState.json')
  return fs.existsSync(filePath) ? JSON.parse(fs.readFileSync(filePath, 'utf-8')) : null
})

ipcMain.handle('get-path', async (_event, name) => {
  return app.getPath(name)
})

// ‚úÖ Handle directory reading request
ipcMain.handle('read-directory', async (_event, dirPath) => {
  try {
    return await fs.readdir(dirPath) // Reads all files inside the directory
  } catch (error) {
    console.error('Failed to read directory:', error)
    return []
  }
})

// ‚úÖ Handle file existence check
ipcMain.handle('file-exists', async (_event, filePath) => {
  try {
    await fs.access(filePath)
    return true
  } catch {
    return false
  }
})
ipcMain.handle('show-confirm-dialog', async (event, options) => {
  const result = await dialog.showMessageBox({
    type: 'warning',
    title: options.title || "Confirm",
    message: options.message || "Are you sure?",
    buttons: options.buttons || ["Yes", "No"],
    defaultId: 0, // Default to "Yes"
    cancelId: 1, // Cancel on "No"
  });
  return result.response; // Returns index of clicked button
});