import { app, shell, BrowserWindow, ipcMain, session } from 'electron'
import { join } from 'path'
import { electronApp, optimizer, is } from '@electron-toolkit/utils'
import icon from '../../resources/icon.png?asset'
import { existsSync, mkdirSync, writeFileSync } from 'fs'
import { spawn } from 'child_process'

const ffmpegPath = app.isPackaged
  ? join(process.resourcesPath, 'ffmpeg.exe')
  : join(__dirname, '../../public/ffmpeg.exe')
const ffprobePath = app.isPackaged
  ? join(process.resourcesPath, 'ffprobe.exe')
  : join(__dirname, '../../public/ffprobe.exe')
let mainWindow
const cookiesPath = app.isPackaged
  ? join(process.resourcesPath, 'cookies.txt')
  : join(__dirname, '../../public/cookies.txt')

const ytdlpPath = app.isPackaged
  ? join(process.resourcesPath, 'yt-dlp.exe')
  : join(__dirname, '../../public/yt-dlp.exe')
// Set icon path based on OS
let iconPath = ''
switch (process.platform) {
  case 'win32':
    iconPath = join(__dirname, '../../public/icon.ico')
    break
  case 'linux':
    iconPath = icon
    break
  default:
    iconPath = join(process.resourcesPath, 'icon.png')
}

// Prevent multiple instances
const gotTheLock = app.requestSingleInstanceLock()
if (!gotTheLock) {
  app.quit()
} else {
  app.on('second-instance', () => {
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore()
      mainWindow.focus()
    }
  })
}

function createWindow() {
  if (mainWindow) return // Prevent duplicate windows

  mainWindow = new BrowserWindow({
    width: 1200,
    height: 670,
    minWidth: 1200,
    minHeight: 670,
    maxWidth: 1200,
    maxHeight: 670,
    autoHideMenuBar: true,
    icon: iconPath,

    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false,
      webviewTag: true, // Disabled by default (safer)
      nodeIntegration: false,
      contextIsolation: true
    }
  })

  mainWindow.once('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.on('closed', () => {
    mainWindow = null // Cleanup memory
  })

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }
}

app.whenReady().then(() => {
  electronApp.setAppUserModelId('com.electron')

  app.on('browser-window-created', (_, window) => {
    optimizer.watchWindowShortcuts(window)
  })

  ipcMain.on('open-webview', (event, url) => {
    console.log('Received YouTube Video URL:', url)
    if (mainWindow) {
      mainWindow.webContents.send('webview-url-update', url)
    }
  })

  createWindow()

  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
async function updateCookiesFile() {
  try {
    const cookies = await session.defaultSession.cookies.get({ domain: '.youtube.com' })
    if (!cookies.length) {
      console.error('No YouTube cookies found.')
      return
    }

    const lines = [
      '# Netscape HTTP Cookie File',
      '# This file is generated by Electron for use by yt-dlp.',
      '# This file was last updated on ' + new Date().toString(),
      ''
    ]

    cookies.forEach((cookie) => {
      let domain = cookie.domain
      if (!domain.startsWith('.')) {
        domain = '.' + domain
      }
      const includeSubdomains = 'TRUE'
      const isSecure = cookie.secure ? 'TRUE' : 'FALSE'
      const expiry = cookie.expirationDate ? Math.floor(cookie.expirationDate) : 0

      const line = [
        domain,
        includeSubdomains,
        cookie.path,
        isSecure,
        expiry,
        cookie.name,
        cookie.value
      ].join('\t')

      lines.push(line)
    })

    const fileContent = lines.join('\n')
    writeFileSync(cookiesPath, fileContent, 'utf8')
    console.log('Cookies updated successfully at:', cookiesPath)
  } catch (error) {
    console.error('Error updating cookies:', error)
  }
}
ipcMain.handle('getYoutubeCookies', async () => {
  await updateCookiesFile()
  return cookiesPath
})

ipcMain.handle('fetch-video-info', async (event, url) => {
  return new Promise((resolve, reject) => {
    // Dump JSON metadata (-J) for a single video
    const args = ['-J', url]

    const proc = spawn(ytdlpPath, args)

    let stdout = ''
    let stderr = ''

    proc.stdout.on('data', (data) => {
      stdout += data.toString()
    })

    proc.stderr.on('data', (data) => {
      stderr += data.toString()
    })

    proc.on('close', (code) => {
      if (code !== 0) {
        // Something went wrong
        reject(new Error(`yt-dlp exited with code ${code}. Error:\n${stderr}`))
        return
      }

      try {
        // Parse the JSON output from yt-dlp
        const json = JSON.parse(stdout)

        // Extract title
        const title = json.title || ''

        // Extract thumbnail (last one is often the largest)
        let thumbnail = ''
        if (Array.isArray(json.thumbnails) && json.thumbnails.length > 0) {
          thumbnail = json.thumbnails[json.thumbnails.length - 1].url
        }

        // Construct a filename based on title and extension (if available)
        // Note: The title may need sanitization for actual file usage.
        const filename = title && json.ext ? `${title}.${json.ext}` : title

        resolve({ title, thumbnail, filename })
      } catch (err) {
        reject(new Error(`Failed to parse JSON from yt-dlp: ${err.message}`))
      }
    })
  })
})

// ðŸ›  Ensure ffmpeg & ffprobe exist
if (!existsSync(ffmpegPath) || !existsSync(ffprobePath)) {
  console.error('FFmpeg or FFprobe not found! Please install FFmpeg.')
}


let downloadProcess = null;
let lastProgress = null; // Store last progress in memory

ipcMain.handle("downloadVideo", async (event, options) => {
  try {
    if (downloadProcess) {
      event.sender.send("download-progress", { status: "A download is already in progress!" });
      return;
    }

    const { url, isAudioOnly, selectedFormat, selectedQuality } = options;
    if (!url || typeof url !== "string") throw new Error("Invalid URL.");

    const finalQuality = /^\d+$/.test(selectedQuality) ? selectedQuality : "720"; // Default 720p
    const finalFormat = selectedFormat?.toLowerCase() || "mp4";

    const formatSpecifier = isAudioOnly
      ? `--extract-audio --audio-format ${finalFormat} --audio-quality best`
      : `-f ${finalFormat}[height<=${finalQuality}]+bestaudio/${finalFormat}+bestaudio/best`;

    const downloadDir = app.getPath("downloads");
    const downloadPath = join(downloadDir, "%(title)s.%(ext)s");

    const args = [
      ...formatSpecifier.split(" "),
      "--ffmpeg-location", ffmpegPath,
      "-o", downloadPath,
      url, "--newline", "--ignore-errors", "--progress"
    ];

    downloadProcess = spawn(ytdlpPath, args, { windowsHide: true });

    // Send every line of output to the frontend without filtering it
    downloadProcess.stdout.on("data", (data) => {
      const line = data.toString().trim();
      console.log("yt-dlp Output:", line); // Debugging line

      // Send every output line directly to the frontend
      event.sender.send("download-progress", { message: line });
    });

    downloadProcess.stderr.on("data", (data) => {
      const errorMessage = data.toString().trim();
      console.error("yt-dlp Error:", errorMessage);
      event.sender.send("download-progress", { error: errorMessage });
    });

    downloadProcess.on("close", (code) => {
      downloadProcess = null;
      event.sender.send("download-progress", { status: "Download complete!", file: downloadPath });
    });

  } catch (err) {
    console.error("Download error:", err);
    event.sender.send("download-progress", { error: err.message });
    throw err;
  }
});


ipcMain.handle("pauseDownload", () => {
  if (downloadProcess) {
    downloadProcess.kill();
    downloadProcess = null;
    return true;
  }
  return false;
});

ipcMain.handle("resumeDownload", async (event, options) => {
  if (!downloadProcess && lastProgress) {
    return ipcMain.handle("downloadVideo", event, options);
  }
  return false;
});

function saveDownloadState(state) {
  const filePath =  join(app.getPath("userData"), "downloadState.json");
  fs.writeFileSync(filePath, JSON.stringify(state));
}

ipcMain.handle("load-download-state", () => {
  const filePath =  join(app.getPath("userData"), "downloadState.json");
  return fs.existsSync(filePath) ? JSON.parse(fs.readFileSync(filePath, "utf-8")) : null;
});